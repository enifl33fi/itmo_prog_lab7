project(':server') {
    apply plugin: 'application'
    application {
        mainClass = 'server.Main'
    }
    dependencies {
        implementation project(':common')
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
        implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.19.0'
        implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.19.0'
        implementation group: 'org.postgresql', name: 'postgresql', version: '42.6.0'

    }
    mainClassName = 'server.Main'

    jar {
        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
        manifest {
            attributes "Main-Class": "$mainClassName"
        }
        from {
            configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
}
project(':client') {
    apply plugin: 'application'
    application {
        mainClass = 'client.Main'
    }
    dependencies {
        implementation project(':common')
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
        implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.19.0'
        implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.19.0'

    }
    mainClassName = 'client.Main'

    jar {
        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
        manifest {
            attributes "Main-Class": "$mainClassName"
        }
        from {
            configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }


}
project(':common'){
    apply plugin: 'java'
    dependencies {
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    }
}

allprojects{
    apply plugin: 'java'

    group 'ru.ifmo.se'
    version '1.0.0'

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    }

    test {
        useJUnitPlatform()
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}